---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-migrator"
  labels:
    app.kubernetes.io/component: post-install-db-migrator-job
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-migrator"
      labels:
        app.kubernetes.io/component: post-install-db-migrator-job
    spec:
      {{- if and  (.Values.database.enabled) ( eq .Values.general.volumeAccessMode "ReadWriteOnce")  }}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ template "bitwarden.mssql" . }}
            topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- if .Values.serviceAccount.name }}
      serviceAccountName: "{{ .Values.serviceAccount.name }}"
      {{- end }}
      initContainers:
      - name: wait-for-db
        command:
          - "/bin/bash"
          - "-c"
        {{- if .Values.database.enabled }}
        args: ['
          while [[ $(kubectl get pods -n {{ .Release.Namespace }} -l app={{ template "bitwarden.mssql" . }} -o jsonpath="{.items[*].status.containerStatuses[*].ready}") != "true" ]]; do sleep 1; done

          echo "SQL Ready!"

          while [[ $(kubectl get pods -n {{ .Release.Namespace }} -l app={{ template "bitwarden.admin" . }} -o jsonpath="{.items[*].status.containerStatuses[*].ready}") != "true" ]]; do sleep 1; done

          echo "Admin Ready!"

          while [ ! -f /db/vault.mdf ]; do sleep 1; done

          echo "DB Ready!"
        ']
        {{- else }}
        args: ['
          while [[ $(kubectl get pods -n {{ .Release.Namespace }} -l app={{ template "bitwarden.admin" . }} -o jsonpath="{.items[*].status.containerStatuses[*].ready}") != "true" ]]; do sleep 1; done

          echo "Admin Ready!"
        ']
        {{- end }}
        image: "{{ .Values.supportComponents.kubectl.image.name }}:{{ .Values.supportComponents.kubectl.image.tag }}"
        volumeMounts:
          {{- if .Values.database.enabled }}
          - name: mssql-data
            mountPath: /db
          {{- end }}
      containers:
      - name: migrate-db
        env:
        - name: MSSQL_CONN_STRING
          valueFrom:
            secretKeyRef:
              {{- if .Values.database.enabled }}
              name: {{ .Release.Name }}-sql-connection-string
              {{- else }}
              name: {{ .Values.secrets.secretName | quote }}
              {{- end }}
              key: globalSettings__sqlServer__connectionString
        image: "{{ .Values.supportComponents.dbMigrator.image.name }}:{{ default ( include "bitwarden.coreVersionDefault" nil ) .Values.general.coreVersionOverride }}"
        volumeMounts:
        {{- if .Values.secrets.secretProviderClass }}
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
        {{- end }}
        {{- if or ( not .Values.database.enabled ) ( and .Values.database.enabled .Release.IsUpgrade ) }}
        args: [ "-f", "DbScripts_transition", "-r"]
        {{- end }}
      restartPolicy: Never
      volumes:
        {{- if .Values.database.enabled }}
        - name: mssql-data
          persistentVolumeClaim:
            claimName: {{ default ( include "bitwarden.mssqlData" . ) .Values.database.volume.data.existingClaim }}
        {{- end }}
        {{- if .Values.secrets.secretProviderClass }}
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ .Values.secrets.secretProviderClass }}
        {{- end }}
