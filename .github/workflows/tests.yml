name: Tests

on:
  pull_request:
    paths:
      - 'charts/**'
  push:
    branches:
      - main
    paths:
      - 'charts/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  test:
    name: Test Helm charts
    runs-on: ubuntu-22.04
    environment: Production
    steps:
      - name: Checkout repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: Azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78 # v3.5
        with:
          version: 'v3.13.1'

      - name: Set up lynx
        run: sudo apt install lynx

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          CHANGED=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$CHANGED" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "changed-list<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          config: scripts/cluster.yaml

      - name: Set up cluster
        if: steps.list-changed.outputs.changed == 'true'
        run: ./scripts/setup.sh setup-cluster

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --target-branch ${{ github.event.repository.default_branch }} --skip-clean-up --namespace bitwarden

      - name: Test install (self-host)
        if: steps.list-changed.outputs.changed == 'true' && contains(steps.list-changed.outputs.changed-list,'self-host')
        run: |
          #For review purposes
          echo "*****DEPLOYMENTS*****"
          kubectl get deployments
          echo "*****PODS*****"
          kubectl get pods
          echo "*****SERVICES*****"
          kubectl get svc
          echo "*****JOBS*****"
          kubectl get jobs
          echo "*****INGRESS*****"
          kubectl describe ingress

          echo "*****HOME*****"
          home=$(curl -Ls https://bitwarden.localhost -w httpcode=%{http_code} --cacert rootCA.pem)
          echo $home | lynx -stdin -dump -width=100
          httpCode=$(echo "${home}" | grep -Po 'httpcode=\K(\d\d\d)')
          bodyCheck=$(echo "${home}" | grep -Pio 'Bitwarden Web Vault')
          if [[ ${httpCode} -ne 200 ]]; then
            echo "::error::ERROR: Home page failed to load.  HTTP code was $httpCode"
            exit 1
          fi
          if [[ "${bodyCheck,,}" != "bitwarden web vault" ]]; then
            echo "::error::ERROR: Home page failed to load.  Please check body output above."
            exit 1
          fi

          echo "Home OK."

          echo "*****API/CONFIG*****"
          config=$(curl -Ls https://bitwarden.localhost/api/config -w httpcode=%{http_code} --cacert rootCA.pem)
          echo $config | lynx -stdin -dump -width=100
          httpCode=$(echo "${config}" | grep -Po 'httpcode=\K(\d\d\d)')
          bodyCheck=$(echo "${config}" | grep -Po '\"vault\":\"https://bitwarden\.localhost\"')
          if [[ ${httpCode} -ne 200 ]]; then
            echo "::error::ERROR: Home page failed to load.  HTTP code was $httpCode"
            exit 1
          fi
          if [[ "$bodyCheck" != '"vault":"https://bitwarden.localhost"' ]]; then
            echo "::error::ERROR: API/Config page failed to load.  Please check body output above."
            exit 1
          fi

          echo "API/Config OK."

          echo "*****ADMIN*****"
          admin=$(curl -Ls https://bitwarden.localhost/admin -w httpcode=%{http_code} --cacert rootCA.pem)
          echo $admin | lynx -stdin -dump -width=100

          httpCode=$(echo "${admin}" | grep -Po 'httpcode=\K(\d\d\d)')
          bodyCheck=$(echo "${admin}" | grep -Po "We'll email you a secure login link")
          if [[ ${httpCode} -ne 200 ]]; then
            echo "::error::ERROR: Home page failed to load.  HTTP code was $httpCode"
            exit 1
          fi
          if [[ "$bodyCheck" != "We'll email you a secure login link" ]]; then
            echo "::error::ERROR: Admin page failed to load.  Please check body output above."
            exit 1
          fi

          echo "Admin OK."

      - name: Login to Azure - CI Subscription
        if: steps.list-changed.outputs.changed == 'true' && contains(steps.list-changed.outputs.changed-list,'sm-operator')
        uses: Azure/login@e15b166166a8746d1a47596803bd8c1b595455cf # v1.6.0
        with:
          creds: ${{ secrets.AZURE_KV_CI_SERVICE_PRINCIPAL }}

      - name: Retrieve secrets
        id: retrieve-secrets
        if: steps.list-changed.outputs.changed == 'true' && contains(steps.list-changed.outputs.changed-list,'sm-operator')
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: "bitwarden-ci"
          secrets: "helm-sm-operator-ci-test-access-token"

      - name: Test install (sm-operator)
        if: steps.list-changed.outputs.changed == 'true' && contains(steps.list-changed.outputs.changed-list,'sm-operator')
        run: |
          #For review purposes
          echo "*****DEPLOYMENTS*****"
          kubectl get deployments

          echo "*****PODS*****"
          pods=$(kubectl get pods -l app.kubernetes.io/name=sm-operator | grep 2/2)
          echo $pods

          if [[ -z "$pods" ]]; then
            echo "::error::No pods found."
            exit 1
          fi

          echo "*****CREATING AUTH SECRET*****"
          kubectl create secret generic bw-auth-token -n bitwarden --from-literal=token="$AUTH_TOKEN"
          echo "*****CREATING BW SECRET*****"
          kubectl apply -f .github/config/sample-bw-secret.yaml

          # Sleeping while BitwardenSecret is being created and synced
          sleep 2s

          echo "*****LOGS*****"
          logs=$(kubectl logs -l app.kubernetes.io/name=sm-operator -c manager)
          echo "$logs"

          completed=$(echo "$logs"| grep "Completed sync for bitwarden/bitwardensecret-sample")

          if [[ -z "$completed" ]]; then
            echo "::error::Secret did not sync."
            exit 1
          fi

          # Sleeping to ensure everything completes
          sleep 2s


          echo "*****RESULTING SECRETS*****"
          secrets=$(kubectl get secrets)
          echo "$secrets"
          
          secretCreated=$(echo "$secrets" | grep -Po "bw-sample-secret\s+Opaque\s+3")

          if [[ -z "$secretCreated" ]]; then
            echo "::error::Secret not created correctly."
            exit 1
          fi

          echo "*****OPERATOR OK*****"
        env:
          AUTH_TOKEN: ${{ steps.retrieve-secrets.outputs.helm-sm-operator-ci-test-access-token }}

      - name: Clean-up
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          helm ls --all --short | xargs -L1 helm delete
          kubectl delete ns bitwarden
          kind delete cluster
